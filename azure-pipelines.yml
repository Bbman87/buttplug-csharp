trigger:
  branches:
    include:
      - master
      - dev
pr:
  branches:
    include:
      - master
      - dev

variables:
  solution: 'Buttplug.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
  - job: "Windows"
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        Debug:
          buildConfiguration: Debug
        Release:
          buildConfiguration: Release
    steps:
      - task: Bash@3
        displayName: "Set Up Build Variables"
        inputs:
          targetType: inline
          script: |
            gitshorthash=$(git describe --long --always --dirty)
            echo "Git Short Hash: $gitshorthash"
            echo "##vso[task.setvariable variable=gitShortHash]$gitshorthash"
            echo "##vso[task.setvariable variable=cliBuildName]windows-cli-$(buildConfiguration)-$gitshorthash"
      - task: NuGetToolInstaller@0
        displayName: "Install Platform Dependencies"
      - task: NuGetCommand@2
        displayName: "Restore Project"
        inputs:
          restoreSolution: '$(solution)'
      - task: VSBuild@1
        displayName: "Build Project"
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          maximumCpuCount: true
      - task: PowerShell@2
        inputs:
          targetType: inline
          script: |
            cinst -y --no-progress opencover.portable nunit-console-runner codecov
            OpenCover.Console.exe -returntargetcode -register:user -target:"nunit3-console.exe" -targetargs:"Buttplug.Test\bin\$(buildConfiguration)\net47\Buttplug.Test.dll Buttplug.Client.Connectors.WebsocketConnector.Test\bin\$(buildConfiguration)\Buttplug.Client.Connectors.WebsocketConnector.Test.dll --inprocess --result=myresults.xml" -output:"coverage.xml" -excludebyfile:"*\*LibLog.cs" -filter:"+[*]* -[nunit*]*"
        displayName: 'Test with Code Coverage'
        condition: and(succeeded(), eq(variables['buildConfiguration'], 'Debug'))
      # Upload coverage to codecov.io
      - task: PowerShell@2
        inputs:
          targetType: inline
          script: |
            codecov.exe -f \"coverage.xml\" -t $(CODECOV_TOKEN)
        displayName: Upload coverage to codecov.
        condition: and(succeeded(), eq(variables['buildConfiguration'], 'Debug'))
      - task: VSTest@2
        displayName: "Test Project"
        condition: and(succeeded(), eq(variables['buildConfiguration'], 'Release'))
        inputs:
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
      - task: PowerShell@2
        displayName: Documentation Generation
        condition: and(succeeded(), and(eq(variables['buildConfiguration'], 'Release'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))))
        inputs:
          targetType: inline
          script: |
            cinst -y docfx
            copy-item README.md docs\index.md
            copy-item *.md docs\articles\
            docfx docs\docfx.json
      - task: ArchiveFiles@2
        condition: and(succeeded(), and(eq(variables['buildConfiguration'], 'Release'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))))
        displayName: "Archive Documentation Artifacts"
        inputs:
          rootFolderOrFile: "docs/gh-pages"
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/buttplug-csharp-docs-$(gitShortHash).zip"
          includeRootFolder: true
      - task: PublishBuildArtifacts@1
        condition: and(succeeded(), and(eq(variables['buildConfiguration'], 'Release'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))))
        displayName: "Publish Documentation Artifacts"
        inputs:
          pathtoPublish: "$(Build.ArtifactStagingDirectory)/buttplug-csharp-docs-$(gitShortHash).zip"
          artifactName: "buttplug-csharp-docs"
      - task: DotNetCoreCLI@2
        displayName: "Publish CLI Arifacts"
        inputs:
          publishWebProjects: false
          zipAfterPublish: true
          command: 'publish'
          arguments: '--configuration $(buildConfiguration) -r win-x64 -f net47 --self-contained true --output $(Build.ArtifactStagingDirectory)/$(cliBuildName) Buttplug.Server.CLI/Buttplug.Server.CLI.csproj'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(cliBuildName)'
          artifactName: "$(cliBuildName)"
  - job: "Linux"
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Debug:
          buildConfiguration: Debug
        Release:
          buildConfiguration: Release
    steps:
      - task: Bash@3
        displayName: "Set Up Build Variables"
        inputs:
          targetType: inline
          script: |
            gitshorthash=$(git describe --long --always --dirty)
            echo "Git Short Hash: $gitshorthash"
            echo "##vso[task.setvariable variable=gitShortHash]$gitshorthash"
            echo "##vso[task.setvariable variable=cliBuildName]linux-cli-$(buildConfiguration)-$gitshorthash"
      - task: NuGetToolInstaller@0
        displayName: "Install Platform Dependencies"
      - task: NuGetCommand@2
        displayName: "Restore Project"
        inputs:
          restoreSolution: '$(solution)'
      - task: DotNetCoreCLI@2
        displayName: "Build Project"
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)Standard'
      # IPC Tests are turned off for this platform, as they time out.
      - task: DotNetCoreCLI@2
        displayName: "Test Project"
        inputs:
          command: 'test'
          arguments: 'Buttplug.Test/Buttplug.Test.csproj --configuration $(buildConfiguration)Standard'
      - task: DotNetCoreCLI@2
        displayName: "Publish Project"
        inputs:
          publishWebProjects: false
          zipAfterPublish: true
          command: 'publish'
          arguments: '--configuration $(buildConfiguration)Standard -r linux-x64 --self-contained true --output $(Build.ArtifactStagingDirectory)/$(cliBuildName) Buttplug.Server.CLI/Buttplug.Server.CLI.csproj'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(cliBuildName)'
          artifactName: "$(cliBuildName)"
  - job: "MacOS"
    pool:
      vmImage: 'macos-10.13'
    strategy:
      matrix:
        Debug:
          buildConfiguration: Debug
        Release:
          buildConfiguration: Release
    steps:
      - task: Bash@3
        displayName: "Set Up Build Variables"
        inputs:
          targetType: inline
          script: |
            gitshorthash=$(git describe --long --always --dirty)
            echo "Git Short Hash: $gitshorthash"
            echo "##vso[task.setvariable variable=gitShortHash]$gitshorthash"
            echo "##vso[task.setvariable variable=cliBuildName]macos-cli-$(buildConfiguration)-$gitshorthash"
      - task: NuGetToolInstaller@0
        displayName: "Install Platform Dependencies"
      - task: NuGetCommand@2
        displayName: "Restore Project"
        inputs:
          restoreSolution: '$(solution)'
      - task: DotNetCoreCLI@2
        displayName: "Build Project"
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)Standard'
      - task: DotNetCoreCLI@2
        displayName: "Test Project"
        inputs:
          command: 'test'
          arguments: 'Buttplug.Test/Buttplug.Test.csproj --configuration $(buildConfiguration)Standard'
      - task: DotNetCoreCLI@2
        displayName: "Publish Project"
        inputs:
          publishWebProjects: false
          zipAfterPublish: true
          command: 'publish'
          arguments: '--configuration $(buildConfiguration)Standard -r osx-x64 --self-contained true --output $(Build.ArtifactStagingDirectory)/$(cliBuildName) Buttplug.Server.CLI/Buttplug.Server.CLI.csproj'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(cliBuildName)'
          artifactName: '$(cliBuildName)'
