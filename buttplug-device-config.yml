# Welcome to Buttplug Device Config
#
# DO NOT EDIT THIS FILE. YOUR CHANGES WILL BE OVERWRITTEN.
#
# Use user-device-config.yml for local device definitions.
#
# Now that we've got that bit of impoliteness out of the way... Hi,
# I'm qDot. Welcome to the buttplug device configuration file.
#
# You've managed to wander into this place we keep all of the sex toy
# information. You're not really supposed to be here, but since you've
# shown up, might as give you a tour.
#
# Devices in Buttplug have the following info:
#
# - Protocol (Required)
#
#   - The language we talk to the device. In our config file, these
#     will all have specific names, usually brands like Lovense or
#     WeVibe. In some cases, specific toys may have their own protocol
#     too, like the Fleshlight Launch. Devices should usually only
#     have one protocol.
#
# - Identifier (Optional)
#
#   - The information we use to find a device. This will vary
#     depending on our bus type. Bluetooth needs name, service IDs,
#     etc. USB needs vendor ID and product ID pairs. This field is
#     optional, as we can't look for devices on serial ports or wifi
#     easily, and we expect the user to help us with those by
#     providing more information in their local config file.
#
# - Name (Optional)
#
#   - Pretty name. Dictionary using ISO-639 codes for i18n.
# 

# Define identifier types. These are the only values devices can have
# in their connection-info lists.

connection-info-types:
  - btclassic
  - btle
  - serial
  - usb
  - hid

# This is the list of possible protocols. Buttplug servers implement
# these protocols. Servers scan for devices (based on the information
# given below) and match the device with the protocol to present
# control to the user.

protocols:
  - lovense
  - xinput
  - erostek-et312
  - erostek-et232
  - wevibe
  - vorze-sa
  - vorze-cyclone
  - kiiroo-v1
  - kiiroo-v2
  - libo
  - magic-motion
  - mysteryvibe
  - picobong
  - vibratissimo
  - youcups
  - trancevibrator

# Now for the actual device definitions. This is gonna get wild, so
# I'll keep a list of rules that you can refer to up here.
#
# - If you are curious about device identifiers or protocols, all
#   of those are documented at https://stpihkal.docs.buttplug.io
#
# - Some fields can be wildcarded using "*". This allows us to do
#   things like searching for all devices of a certain name.
#
# - Where possible, we assume all devices have at least one output (so
#   we can send the commands), and maybe one input. In cases
#   otherwise, a comment should be left denoting what we're doing
#   something different.
#
# - Most toys just mirror good ol' serial. With that in mind, we call
#   the host-to-device line tx, and device-to-host line rx.
#
# - If you see a "btle" connection info with service IDs but no
#   characteristic IDs, this means that we'll try autodetecting the
#   characteristics. We'll just expect it to have an input (which
#   we'll name "rx") and an output characteristic (which we'll name
#   "tx"), as mentioned above.
#
# - If you're connecting to a buttplug server and don't see a device
#   that's listed here, it's not the fault of this config file.
#   Servers may not implement all protocols or busses for various
#   reasons. We just define which devices we may know about here. File
#   an issue on the library you're using.
#
# - If you're connecting to a buttplug server and some device doesn't
#   take a Buttplug message you're expecting it to, it's not the fault
#   of this config file. Servers implement protocols, and protocols
#   dictate which messages they are capable of sending. We don't
#   really keep a standard for that, we just define which devices we
#   may know about here. File an issue on the library you're using.
  
devices:
  lovense:
    # Lovense is special. Special in oh so many ways.
    #
    # Lovense have changed BLE name formats at least once. For this
    # generic device, we just use the largest wildcard we can. We do
    # our name and capabilities finding in the protocol
    # implementation, because we have to query the device after
    # connection.
    #
    # The service uuids change constantly. This list is overly
    # exhaustive, because we have to specify services in WebBluetooth
    # and can't wildcard them. We'll add more as we find them.
    protocol: lovense
    connection-info:
      btle:
        name: LVS-*
        services:
          - uuid: 0000fff0-0000-1000-8000-00805f9b34fb
          - uuid: 6e400001-b5a3-f393-e0a9-e50e24dcca9e
          - uuid: 50300001-0024-4bd4-bbd5-a6920e4c5653
          - uuid: 57300001-0023-4bd4-bbd5-a6920e4c5653
          - uuid: 5a300001-0024-4bd4-bbd5-a6920e4c5653
          - uuid: 50300001-0023-4bd4-bbd5-a6920e4c5653
          - uuid: 53300001-0023-4bd4-bbd5-a6920e4c5653
          - uuid: 5a300001-0023-4bd4-bbd5-a6920e4c5653
          - uuid: 4f300001-0023-4bd4-bbd5-a6920e4c5653
  xinput-compatible-gamepad:
    # This will actually be ANY gamepad that supports XInput.
    name:
      en-us: XBox Compatible Gamepad
    protocol: xinput
  fleshlight-launch:
    name:
      en-us: Fleshlight Launch
    connection-info:
      btle:
        name: Launch
        services:
          - uuid: 88f80580-0000-01e6-aace-0002a5d5c51b
            characteristics:
              tx: 88f80581-0000-01e6-aace-0002a5d5c51b
              rx: 88f80582-0000-01e6-aace-0002a5d5c51b
              # The Launch has a special characteristic for loading
              # firmware.
              cmd: 88f80583-0000-01e6-aace-0002a5d5c51b
    protocol: kiiroo-v2
  erostek-et312:
    name:
      en-us: Erostek ET312
    connection-info:
      serial:
        baudrate: 19200
        databits: 8
        parity: N
        stopbits: 1
    protocol: et312
  vorze-cyclone-x:
    name:
      en-us: Vorze Cyclone X
    connection-info:
      hid:
        vendor-id: 0x0483
        product-id: 0x5750
    protocol: vorze-cyclonex
  rez-trancevibrator:
    name:
      en-us: Rez Trancevibrator
    protocol: trancevibrator
    connection-info:
      usb:
        vendor-id: 0xb49
        product-id: 0x064f
  kiiroo-onyx:
    name:
      en-us: Kiiroo Onyx
    protocol: kiiroov1
    connection-info:
      btle:
        name: ONYX
        services:
          - uuid: 49535343-fe7d-4ae5-8fa9-9fafd205e455
            characteristics:
              rx: 49535343-1e4d-4bd9-ba61-23c647249616
              tx: 49535343-8841-43f4-a8d4-ecbe34729bb3
              cmd: 49535343-aca3-481c-91ec-d85e28a60318
              cmd2: 49535343-6daa-4d02-abf6-19569aca69fe
  kiiroo-pearl:
    name:
      en-us: Kiiroo Pearl
    protocol: kiiroov1
    connection-info:
      btle:
        name: PEARL
        services:
          - uuid: 49535343-fe7d-4ae5-8fa9-9fafd205e455
            characteristics:
              rx: 49535343-1e4d-4bd9-ba61-23c647249616
              tx: 49535343-8841-43f4-a8d4-ecbe34729bb3
              cmd: 49535343-aca3-481c-91ec-d85e28a60318
              cmd2: 49535343-6daa-4d02-abf6-19569aca69fe
  vorze-cyclone-sa:
    name:
      en-us: Vorze Cyclone SA
      protocol: vorzesa
      connection-info:
        btle:
          name: CYCSA
          services:
            - uuid: 40ee1111-63ec-4b7f-8ce7-712efd55b90e
  vorze-bach-smart:
    name:
      en-us: Vorze Bach Smart
      protocol: vorzesa
      connection-info:
        btle:
          name: Bach smart
          services:
            - uuid: 40ee1111-63ec-4b7f-8ce7-712efd55b90e
  vorze-ufo-sa:
    name:
      en-us: Vorze UFO SA
      protocol: vorzesa
      connection-info:
        btle:
          name: UFOSA
          services:
            - uuid: 40ee1111-63ec-4b7f-8ce7-712efd55b90e
            
  # nintendo-joycon:
  #   name:
  #     en-us: Nintendo Joycon
  #   protocol: joycon
  #   connection-info:
  #     - hid:
  #         vendor-id: 0x057e
  #         product-id: 0x2006
